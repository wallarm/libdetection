#define _GNU_SOURCE
#include "bash.h"
#include "bash_lexer.h"
#include "bash_test.h"
#include <string.h>
#include <stdio.h>
#include <wallarm/utils.h>
#include <wallarm/bsearch.h>

/*!max:re2c */

#define MAXBUFSIZ 1024
#define MINBUFSIZ 32

#define SSYM(ch) [ch] = ch

static const unsigned char selfsyms[] = {
    SSYM('>'), SSYM('<'), SSYM('-'), SSYM('{'), SSYM('}'), SSYM(';'), SSYM('('),
    SSYM(')'), SSYM('|'), SSYM('&'), SSYM('\n'), SSYM('\r')
};

static const struct detect_str bash_lexer_cmds[] = {
    DETECT_CSTR("."),
    DETECT_CSTR("7z"),
    DETECT_CSTR("7za"),
    DETECT_CSTR("7zr"),
    DETECT_CSTR("adduser"),
    DETECT_CSTR("alias"),
    DETECT_CSTR("apt-get"),
    DETECT_CSTR("arch"),
    DETECT_CSTR("arp"),
    DETECT_CSTR("bash"),
    DETECT_CSTR("batch"),
    DETECT_CSTR("breaksw"),
    DETECT_CSTR("bsdcat"),
    DETECT_CSTR("bsdiff"),
    DETECT_CSTR("bsdtar"),
    DETECT_CSTR("builtin"),
    DETECT_CSTR("bzcat"),
    DETECT_CSTR("bzdiff"),
    DETECT_CSTR("bzegrep"),
    DETECT_CSTR("bzfgrep"),
    DETECT_CSTR("bzgrep"),
    DETECT_CSTR("bzip2"),
    DETECT_CSTR("bzless"),
    DETECT_CSTR("bzmore"),
    DETECT_CSTR("cat"),
    DETECT_CSTR("cc"),
    DETECT_CSTR("chattr"),
    DETECT_CSTR("chdir"),
    DETECT_CSTR("chflags"),
    DETECT_CSTR("chmod"),
    DETECT_CSTR("command"),
    DETECT_CSTR("compress"),
    DETECT_CSTR("cp"),
    DETECT_CSTR("crontab"),
    DETECT_CSTR("csh"),
    DETECT_CSTR("curl"),
    DETECT_CSTR("dash"),
    DETECT_CSTR("dhclient"),
    DETECT_CSTR("diff"),
    DETECT_CSTR("dmesg"),
    DETECT_CSTR("doas"),
    DETECT_CSTR("dpkg"),
    DETECT_CSTR("du"),
    DETECT_CSTR("echo"),
    DETECT_CSTR("egrep"),
    DETECT_CSTR("endsw"),
    DETECT_CSTR("env"),
    DETECT_CSTR("env-update"),
    DETECT_CSTR("eval"),
    DETECT_CSTR("exec"),
    DETECT_CSTR("exit"),
    DETECT_CSTR("expand"),
    DETECT_CSTR("export"),
    DETECT_CSTR("expr"),
    DETECT_CSTR("false"),
    DETECT_CSTR("fc"),
    DETECT_CSTR("fetch"),
    DETECT_CSTR("fgrep"),
    DETECT_CSTR("file"),
    DETECT_CSTR("filetest"),
    DETECT_CSTR("find"),
    DETECT_CSTR("foreach"),
    DETECT_CSTR("ftp"),
    DETECT_CSTR("ftpstats"),
    DETECT_CSTR("ftpwho"),
    DETECT_CSTR("gcc"),
    DETECT_CSTR("gdb"),
    DETECT_CSTR("git"),
    DETECT_CSTR("grep"),
    DETECT_CSTR("gunzip"),
    DETECT_CSTR("gzcat"),
    DETECT_CSTR("gzip"),
    DETECT_CSTR("head"),
    DETECT_CSTR("history"),
    DETECT_CSTR("hostid"),
    DETECT_CSTR("hostname"),
    DETECT_CSTR("htdigest"),
    DETECT_CSTR("htpasswd"),
    DETECT_CSTR("hup"),
    DETECT_CSTR("id"),
    DETECT_CSTR("ifconfig"),
    DETECT_CSTR("ip6tables"),
    DETECT_CSTR("ipconfig"),
    DETECT_CSTR("iptables"),
    DETECT_CSTR("irb"),
    DETECT_CSTR("irb1"),
    DETECT_CSTR("irb18"),
    DETECT_CSTR("irb19"),
    DETECT_CSTR("irb20"),
    DETECT_CSTR("irb21"),
    DETECT_CSTR("irb22"),
    DETECT_CSTR("java"),
    DETECT_CSTR("jexec"),
    DETECT_CSTR("jobs"),
    DETECT_CSTR("kill"),
    DETECT_CSTR("killall"),
    DETECT_CSTR("last"),
    DETECT_CSTR("lastcomm"),
    DETECT_CSTR("lastlog"),
    DETECT_CSTR("lastlogin"),
    DETECT_CSTR("less"),
    DETECT_CSTR("lessecho"),
    DETECT_CSTR("lessfile"),
    DETECT_CSTR("lesspipe"),
    DETECT_CSTR("lftp"),
    DETECT_CSTR("lftpget"),
    DETECT_CSTR("local"),
    DETECT_CSTR("locate"),
    DETECT_CSTR("logname"),
    DETECT_CSTR("lp"),
    DETECT_CSTR("ls"),
    DETECT_CSTR("ls-F"),
    DETECT_CSTR("lsb_release"),
    DETECT_CSTR("lscpu"),
    DETECT_CSTR("lsmod"),
    DETECT_CSTR("lsof"),
    DETECT_CSTR("lspci"),
    DETECT_CSTR("lsusb"),
    DETECT_CSTR("lwp-download"),
    DETECT_CSTR("lwp-dump"),
    DETECT_CSTR("lwp-mirror"),
    DETECT_CSTR("lwp-request"),
    DETECT_CSTR("lynx"),
    DETECT_CSTR("lzcat"),
    DETECT_CSTR("lzcmp"),
    DETECT_CSTR("lzdiff"),
    DETECT_CSTR("lzegrep"),
    DETECT_CSTR("lzfgrep"),
    DETECT_CSTR("lzgrep"),
    DETECT_CSTR("lzless"),
    DETECT_CSTR("lzma"),
    DETECT_CSTR("lzmore"),
    DETECT_CSTR("mailq"),
    DETECT_CSTR("mkdir"),
    DETECT_CSTR("mlocate"),
    DETECT_CSTR("more"),
    DETECT_CSTR("mount"),
    DETECT_CSTR("mv"),
    DETECT_CSTR("mysql"),
    DETECT_CSTR("mysqladmin"),
    DETECT_CSTR("mysqldump"),
    DETECT_CSTR("mysqldumpslow"),
    DETECT_CSTR("mysqlhotcopy"),
    DETECT_CSTR("mysqlshow"),
    DETECT_CSTR("nano"),
    DETECT_CSTR("nc"),
    DETECT_CSTR("nc.openbsd"),
    DETECT_CSTR("nc.traditional"),
    DETECT_CSTR("ncat"),
    DETECT_CSTR("net"),
    DETECT_CSTR("netcat"),
    DETECT_CSTR("netkit-ftp"),
    DETECT_CSTR("netstat"),
    DETECT_CSTR("nice"),
    DETECT_CSTR("nmap"),
    DETECT_CSTR("nohup"),
    DETECT_CSTR("nping"),
    DETECT_CSTR("nslookup"),
    DETECT_CSTR("nstat"),
    DETECT_CSTR("onintr"),
    DETECT_CSTR("openssl"),
    DETECT_CSTR("passwd"),
    DETECT_CSTR("perl"),
    DETECT_CSTR("perl5"),
    DETECT_CSTR("perlsh"),
    DETECT_CSTR("perms"),
    DETECT_CSTR("pftp"),
    DETECT_CSTR("pgrep"),
    DETECT_CSTR("php"),
    DETECT_CSTR("php5"),
    DETECT_CSTR("php7"),
    DETECT_CSTR("ping"),
    DETECT_CSTR("pkexec"),
    DETECT_CSTR("pkg"),
    DETECT_CSTR("pkg_info"),
    DETECT_CSTR("pkginfo"),
    DETECT_CSTR("pkill"),
    DETECT_CSTR("popd"),
    DETECT_CSTR("printenv"),
    DETECT_CSTR("ps"),
    DETECT_CSTR("ptar"),
    DETECT_CSTR("ptardiff"),
    DETECT_CSTR("ptargrep"),
    DETECT_CSTR("pushd"),
    DETECT_CSTR("python"),
    DETECT_CSTR("python2"),
    DETECT_CSTR("python3"),
    DETECT_CSTR("python3m"),
    DETECT_CSTR("rar"),
    DETECT_CSTR("rcp"),
    DETECT_CSTR("realpath"),
    DETECT_CSTR("rename"),
    DETECT_CSTR("repeat"),
    DETECT_CSTR("replace"),
    DETECT_CSTR("rm"),
    DETECT_CSTR("rmdir"),
    DETECT_CSTR("rmuser"),
    DETECT_CSTR("rnano"),
    DETECT_CSTR("route"),
    DETECT_CSTR("rpm"),
    DETECT_CSTR("rsync"),
    DETECT_CSTR("ruby"),
    DETECT_CSTR("ruby1"),
    DETECT_CSTR("ruby18"),
    DETECT_CSTR("ruby19"),
    DETECT_CSTR("ruby20"),
    DETECT_CSTR("ruby21"),
    DETECT_CSTR("ruby22"),
    DETECT_CSTR("sched"),
    DETECT_CSTR("scp"),
    DETECT_CSTR("sdiff"),
    DETECT_CSTR("sed"),
    DETECT_CSTR("sendmail"),
    DETECT_CSTR("set"),
    DETECT_CSTR("setenv"),
    DETECT_CSTR("setsid"),
    DETECT_CSTR("sftp"),
    DETECT_CSTR("sh"),
    DETECT_CSTR("sh.distrib"),
    DETECT_CSTR("shutdown"),
    DETECT_CSTR("sleep"),
    DETECT_CSTR("socat"),
    DETECT_CSTR("sort"),
    DETECT_CSTR("source"),
    DETECT_CSTR("ssh"),
    DETECT_CSTR("strings"),
    DETECT_CSTR("su"),
    DETECT_CSTR("sudo"),
    DETECT_CSTR("svn"),
    DETECT_CSTR("sysctl"),
    DETECT_CSTR("tail"),
    DETECT_CSTR("tailf"),
    DETECT_CSTR("tar"),
    DETECT_CSTR("tcping"),
    DETECT_CSTR("tcptraceroute"),
    DETECT_CSTR("tcsh"),
    DETECT_CSTR("tee"),
    DETECT_CSTR("telnet"),
    DETECT_CSTR("time"),
    DETECT_CSTR("timeout"),
    DETECT_CSTR("top"),
    DETECT_CSTR("touch"),
    DETECT_CSTR("traceroute"),
    DETECT_CSTR("traceroute6"),
    DETECT_CSTR("uname"),
    DETECT_CSTR("uncompress"),
    DETECT_CSTR("unlzma"),
    DETECT_CSTR("unrar"),
    DETECT_CSTR("unset"),
    DETECT_CSTR("unxz"),
    DETECT_CSTR("unzip"),
    DETECT_CSTR("useradd"),
    DETECT_CSTR("userdel"),
    DETECT_CSTR("usermod"),
    DETECT_CSTR("vigr"),
    DETECT_CSTR("vim"),
    DETECT_CSTR("vipw"),
    DETECT_CSTR("w3m"),
    DETECT_CSTR("wget"),
    DETECT_CSTR("who"),
    DETECT_CSTR("whoami"),
    DETECT_CSTR("xargs"),
    DETECT_CSTR("xterm"),
    DETECT_CSTR("xz"),
    DETECT_CSTR("xzcat"),
    DETECT_CSTR("xzcmp"),
    DETECT_CSTR("xzdec"),
    DETECT_CSTR("xzdiff"),
    DETECT_CSTR("xzegrep"),
    DETECT_CSTR("xzfgrep"),
    DETECT_CSTR("xzgrep"),
    DETECT_CSTR("xzless"),
    DETECT_CSTR("xzmore"),
    DETECT_CSTR("yum"),
    DETECT_CSTR("zcat"),
    DETECT_CSTR("zcmp"),
    DETECT_CSTR("zdiff"),
    DETECT_CSTR("zegrep"),
    DETECT_CSTR("zfgrep"),
    DETECT_CSTR("zgrep"),
    DETECT_CSTR("zip"),
    DETECT_CSTR("zless"),
    DETECT_CSTR("zmore"),
    DETECT_CSTR("zrun"),
    DETECT_CSTR("zsh"),
};

static int
bash_lexer_cmd_cmp(const struct detect_str *cmd, const char *name, size_t len)
{
    size_t min_len = cmd->len > len ? len : cmd->len;
    int rv;

    if ((rv = memcmp(cmd->str, name, min_len)) != 0)
        return (rv);
    if (cmd->len > len)
        return (1);
    if (cmd->len < len)
        return (-1);
    return (0);
}

static ssize_t
bash_lexer_cmd_find(const char *name, size_t len)
{
    size_t idx;

    if (!WALLARM_BSEARCH(&idx, bash_lexer_cmds, W_ARRAY_SIZE(bash_lexer_cmds),
                         bash_lexer_cmd_cmp(wbsearch_elm, name, len)))
        return (-1);
    return (idx);
}

int
bash_lexer_test(void)
{
    for (size_t i = 1; i != W_ARRAY_SIZE(bash_lexer_cmds); i++) {
        const struct detect_str *s1 = &bash_lexer_cmds[i - 1];
        const struct detect_str *s2 = &bash_lexer_cmds[i];

        if (bash_lexer_cmd_cmp(s1, s2->str, s2->len) >= 0) {
            fprintf(stderr, "%s >= %s\n", s1->str, s2->str);
            return (-1);
        }
    }
    return (0);
}

static int
keyname_acceptable(struct bash_detect_ctx *ctx)
{
    switch (ctx->last_read_token)
    {
        case '\n':
        case ';':
        case '(':
        case ')':
        case '|':
        case '&':
        case '{':
        case '}':
        case TOK_AND_AND:
        case TOK_BANG:
        case TOK_BAR_AND:
        case TOK_DO:
        case TOK_DONE:
        case TOK_ELIF:
        case TOK_ELSE:
        case TOK_ESAC:
        case TOK_FI:
        case TOK_IF:
        case TOK_OR_OR:
        case TOK_SEMI_SEMI:
        case TOK_SEMI_AND:
        case TOK_SEMI_SEMI_AND:
        case TOK_THEN:
        case TOK_TIME:
        case TOK_TIMEOPT:
        case TOK_TIMEIGN:
        case TOK_COPROC:
        case TOK_UNTIL:
        case TOK_WHILE:
        case 0:
          return 1;
        default:
        if (ctx->last_read_token == TOK_WORD &&
            ctx->token_before_that == TOK_COPROC)
            return 1;
        if (ctx->last_read_token == TOK_WORD &&
            ctx->token_before_that == TOK_FUNCTION)
            return 1;
        return 0;
    }
}

int
bash_get_token(
    struct bash_detect_ctx *ctx, union BASH_PARSER_STYPE *arg)
{
    const unsigned char *end;
    unsigned char yych, yyaccept;
    int rv;

    if ((rv = detect_re2c_prepare_input(&ctx->lexer.re2c, &end, YYMAXFILL)) != 0)
        return (-rv);

#define YYGETSTATE() ctx->lexer.state
#define YYSETSTATE(st) \
    ({ \
        ctx->lexer.state = (st); \
    })
#define YYGETCONDITION() ctx->lexer.condition
#define YYSETCONDITION(cond) ({ctx->lexer.condition = (cond);})
#define RET(ctx, tok) \
    do { \
       DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c); \
       ctx->token_before_that = ctx->last_read_token; \
       ctx->last_read_token = (tok); \
       return (tok); \
    } while (0)
#define KEYNAME_SET(arg, _name_str) \
    do { \
        (arg)->data.value.str = _name_str; \
        (arg)->data.value.len = sizeof(_name_str) - 1; \
    } while (0)
#define KEYNAME_SET_RET_EX(ctx, arg, _str, _name, _flags) \
    do { \
        KEYNAME_SET(arg, _str); \
        (arg)->data.flags = (_flags); \
        (arg)->data.tok = TOK_##_name; \
        RET(ctx, TOK_##_name); \
    } while (0)
#define KEYNAME_SET_RET_WO_CHECK(ctx, arg, _name, _flags) \
    KEYNAME_SET_RET_EX(ctx, arg, #_name, _name, _flags)
#define KEYNAME_SET_RET(ctx, arg, _name, _flags) \
    do { \
        if (keyname_acceptable(ctx)) \
            KEYNAME_SET_RET_EX(ctx, arg, #_name, _name, _flags); \
        else \
            KEYNAME_SET_RET_EX(ctx, arg, "WORD", WORD, 0); \
    } while (0)
#define RET_DATA_EX(toksuff, ctx, arg, _flags) \
    do { \
        (arg)->data.value = (ctx)->lexer.buf.data; \
        (arg)->data.tok = TOK_##toksuff; \
        (arg)->data.flags = (_flags)|BASH_VALUE_NEEDFREE; \
        detect_buf_reinit(&(ctx)->lexer.buf); \
        RET(ctx, TOK_##toksuff); \
    } while (0)
#define RET_DATA(toksuff, ctx, arg) \
    RET_DATA_EX(toksuff, ctx, arg, 0)
#define RET_DATA_ERROR(ctx) detect_buf_deinit(&(ctx)->lexer.buf)

    /*!re2c
      re2c:define:YYCTYPE  = "DETECT_RE2C_YYCTYPE";
      re2c:define:YYCURSOR = DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c);
      re2c:define:YYMARKER = DETECT_RE2C_YYMARKER(&ctx->lexer.re2c);
      re2c:define:YYCTXMARKER = DETECT_RE2C_YYCTXMARKER(&ctx->lexer.re2c);
      re2c:define:YYLIMIT  = end;
      re2c:define:YYCONDTYPE = BASH_LEXER_CONDTYPE;
      re2c:define:YYFILL   = "DETECT_RE2C_YYFILL(&ctx->lexer.re2c, &end, @@, YYMAXFILL);";
      re2c:define:YYFILL@len = @@ ;
      re2c:define:YYFILL:naked = 1;
      re2c:yyfill:enable   = 1;
      re2c:yyfill:check    = 1;
      re2c:yych:conversion = 0;
      re2c:indent:top      = 1;
      re2c:variable:yych   = yych;
      re2c:variable:yyaccept = yyaccept;
      re2c:condprefix      = bash_;
      re2c:condenumprefix  = bash_;

      whitespace = [ \t];
      word = [^\x00 \t<>;()|&\n\r`];
      self = [<>\;()|&\n\r`];
      key_end = [\x00 \t<>;()|&\n\r`];

      <> {
          if (ctx->lexer.inword) {
              YYSETCONDITION(bash_INSTRING);
              arg->data.flags = BASH_DATA_NOSTART;
              detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
              goto bash_INSTRING;
          }
          YYSETCONDITION(bash_INITIAL);
          goto bash_INITIAL;
      }
      <INSTRING> ['"] => INITIAL {
          YYSETSTATE(-1);
          goto return_word;
      }
      <WORD> [$][_a-zA-Z][_a-zA-Z0-9]*|[$][0-9]|"${"word+"}" {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto bash_WORD;
      }
      <WORD> word {
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '\'') {
              YYSETCONDITION(bash_SQUOTE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '"') {
              YYSETCONDITION(bash_DQUOTE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '\\') {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              YYSETCONDITION(bash_WORD_ESCAPE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto bash_WORD;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <WORD_ESCAPE> word {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto bash_WORD;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <WORD, WORD_ESCAPE> [\x00] {
          if (ctx->lexer.re2c.fin && ctx->lexer.re2c.tmp_data_in_use &&
              ctx->lexer.re2c.pos >= ctx->lexer.re2c.tmp_data + ctx->lexer.re2c.tmp_data_siz) {
              YYSETCONDITION(bash_INITIAL);
              DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
              YYSETSTATE(-1);
              goto return_word;
          }
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto yy0;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <WORD> [<>] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);

          if (ctx->last_read_token == TOK_LESS_AND ||
              ctx->last_read_token == TOK_GREATER_AND) {
              char *ep = NULL;

              if (detect_buf_add_char(&ctx->lexer.buf, '\0')) {
                  detect_buf_deinit(&ctx->lexer.buf);
                  RET(ctx, TOK_ERROR);
              }

              strtoll(ctx->lexer.buf.data.str, &ep, 10);

              ctx->lexer.buf.data.len--;

              if (errno || ep == ctx->lexer.buf.data.str) {
                  if (ctx->lexer.buf.data.str[0] == '{' &&
                      ctx->lexer.buf.data.str[ctx->lexer.buf.data.len - 1] == '}' &&
                      1)
                      KEYNAME_SET_RET(ctx, arg, REDIR_WORD, 0);
                  goto return_word;
              }

              KEYNAME_SET_RET(ctx, arg, NUMBER, 0);
          }

          goto return_word;
      }
      <WORD> "$(" => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          goto return_word;
      }
      <WORD_ESCAPE> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);

          goto return_word;
      }
      <WORD> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);

return_word:
          {
              if (memchr(ctx->lexer.buf.data.str, '=', ctx->lexer.buf.data.len)) {
                  detect_buf_deinit(&ctx->lexer.buf);
                  KEYNAME_SET_RET_WO_CHECK(ctx, arg, ASSIGNMENT_WORD, 0);
              }

              if (ctx->last_read_token != TOK_WORD && ctx->lexer.buf.data.str) {
                  char *pch = memrchr(ctx->lexer.buf.data.str, '/', ctx->lexer.buf.data.len);
                  if (!pch)
                      pch = ctx->lexer.buf.data.str;
                  else
                      ++pch;
                  int len = ctx->lexer.buf.data.len - (pch - ctx->lexer.buf.data.str);
                  ssize_t idx = bash_lexer_cmd_find(pch, len);

                  if (idx >= 0) {
                      detect_buf_deinit(&ctx->lexer.buf);
                      KEYNAME_SET_RET_WO_CHECK(ctx, arg, WORD, BASH_KEY_INSTR);
                  }
              }
              if (ctx->last_read_token != TOK_WORD && ctx->lexer.buf.data.str &&
                  ctx->lexer.buf.data.len > 2 && *ctx->lexer.buf.data.str == '$') {
                  char *pch = ctx->lexer.buf.data.str + 1;
                  int len = ctx->lexer.buf.data.len - 1;
                  ssize_t idx = bash_lexer_cmd_find(pch, len);

                  if (idx >= 0) {
                      detect_buf_deinit(&ctx->lexer.buf);
                      KEYNAME_SET_RET_WO_CHECK(ctx, arg, WORD, BASH_KEY_INSTR);
                  }
              }

              detect_buf_deinit(&ctx->lexer.buf);
              KEYNAME_SET_RET(ctx, arg, WORD, 0);
          }
      }
      <SQUOTE> ['] => WORD {
          YYSETSTATE(-1);
          goto yy0;
      }
      <DQUOTE> ["] => WORD {
          YYSETSTATE(-1);
          goto yy0;
      }
      <INSTRING, SQUOTE, DQUOTE> [\x00] {
          if (ctx->lexer.re2c.fin && ctx->lexer.re2c.tmp_data_in_use &&
              ctx->lexer.re2c.pos >= ctx->lexer.re2c.tmp_data + ctx->lexer.re2c.tmp_data_siz) {
              YYSETCONDITION(bash_INITIAL);
              DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
              arg->data.flags |= BASH_DATA_NOEND;
              YYSETSTATE(-1);
              KEYNAME_SET_RET(ctx, arg, WORD, 0);
          }
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto yy0;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <INSTRING, SQUOTE, DQUOTE> .|[\n] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto yy0;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <INSTRING, SQUOTE, DQUOTE> [^] {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA_ERROR(ctx);
          RET(ctx, TOK_ERROR);
      }
      <DASHCOMMENT> [\n] => INITIAL {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto bash_INITIAL;
      }
      <DASHCOMMENT> [\x00] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          goto bash_INITIAL;
      }
      <DASHCOMMENT> . => DASHCOMMENT {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto bash_DASHCOMMENT;
      }
      <INITIAL> '#' => DASHCOMMENT {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto bash_DASHCOMMENT;
      }
      <INITIAL> '<<<' {
          RET_DATA(LESS_LESS_LESS, ctx, arg);
      }
      <INITIAL> '<<-' {
          RET_DATA(LESS_LESS_MINUS, ctx, arg);
      }
      <INITIAL> '&>>' {
          RET_DATA(AND_GREATER_GREATER, ctx, arg);
      }
      <INITIAL> ';;&' {
          RET_DATA(SEMI_SEMI_AND, ctx, arg);
      }
      <INITIAL> '<<' {
          RET_DATA(LESS_LESS, ctx, arg);
      }
      <INITIAL> '<>' {
          RET_DATA(LESS_GREATER, ctx, arg);
      }
      <INITIAL> '<&' {
          RET_DATA(LESS_AND, ctx, arg);
      }
      <INITIAL> '>>' {
          RET_DATA(GREATER_GREATER, ctx, arg);
      }
      <INITIAL> '>&' {
          RET_DATA(GREATER_AND, ctx, arg);
      }
      <INITIAL> '>|' {
          RET_DATA(GREATER_BAR, ctx, arg);
      }
      <INITIAL> '&>' {
          RET_DATA(AND_GREATER, ctx, arg);
      }
      <INITIAL> '&&' {
          RET_DATA(AND_AND, ctx, arg);
      }
      <INITIAL> '||' {
          RET_DATA(OR_OR, ctx, arg);
      }
      <INITIAL> ';;' {
          RET_DATA(SEMI_SEMI, ctx, arg);
      }
      <INITIAL> ';&' {
          RET_DATA(SEMI_AND, ctx, arg);
      }
      <INITIAL> '|&' {
          RET_DATA(BAR_AND, ctx, arg);
      }
      <INITIAL> '$(' {
          RET_DATA(SUBSH_START, ctx, arg);
      }
      <INITIAL> '<(' {
          RET_DATA(SUBSH_START, ctx, arg);
      }
      <INITIAL> '>(' {
          RET_DATA(SUBSH_START, ctx, arg);
      }
      <INITIAL> "if"/key_end {
          KEYNAME_SET_RET(ctx, arg, IF, BASH_KEY_INSTR);
      }
      <INITIAL> "then"/key_end {
          KEYNAME_SET_RET(ctx, arg, THEN, BASH_KEY_INSTR);
      }
      <INITIAL> "else"/key_end {
          KEYNAME_SET_RET(ctx, arg, ELSE, BASH_KEY_INSTR);
      }
      <INITIAL> "elif"/key_end {
          KEYNAME_SET_RET(ctx, arg, ELIF, BASH_KEY_INSTR);
      }
      <INITIAL> "fi"/key_end {
          KEYNAME_SET_RET(ctx, arg, FI, BASH_KEY_INSTR);
      }
      <INITIAL> "case"/key_end {
          KEYNAME_SET_RET(ctx, arg, CASE, BASH_KEY_INSTR);
      }
      <INITIAL> "esac"/key_end {
          KEYNAME_SET_RET(ctx, arg, ESAC, BASH_KEY_INSTR);
      }
      <INITIAL> "for"/key_end {
          KEYNAME_SET_RET(ctx, arg, FOR, BASH_KEY_INSTR);
      }
      <INITIAL> "select"/key_end {
          KEYNAME_SET_RET(ctx, arg, SELECT, BASH_KEY_INSTR);
      }
      <INITIAL> "while"/key_end {
          KEYNAME_SET_RET(ctx, arg, WHILE, BASH_KEY_INSTR);
      }
      <INITIAL> "until"/key_end {
          KEYNAME_SET_RET(ctx, arg, UNTIL, BASH_KEY_INSTR);
      }
      <INITIAL> "do"/key_end {
          if (ctx->last_read_token == TOK_WORD &&
              (ctx->token_before_that == TOK_FOR ||
               ctx->token_before_that == TOK_SELECT)) {
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, DO, BASH_KEY_INSTR);
          }
          if (ctx->last_read_token == '\n' || ctx->last_read_token == ';')
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, DO, BASH_KEY_INSTR);
          if (ctx->last_read_token == TOK_ARITH_FOR_EXPRS)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, DO, BASH_KEY_INSTR);
          KEYNAME_SET_RET(ctx, arg, DO, BASH_KEY_INSTR);
      }
      <INITIAL> "done"/key_end {
          KEYNAME_SET_RET(ctx, arg, DONE, BASH_KEY_INSTR);
      }
      <INITIAL> "in"/key_end {
          if ((ctx->last_read_token == TOK_WORD) &&
              (ctx->token_before_that == TOK_FOR ||
               ctx->token_before_that == TOK_CASE ||
               ctx->token_before_that == TOK_SELECT)) {
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, IN, BASH_KEY_INSTR);
          }
         if (ctx->last_read_token == TOK_WORD || ctx->last_read_token == '\n')
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, IN, BASH_KEY_INSTR);
          KEYNAME_SET_RET(ctx, arg, IN, BASH_KEY_INSTR);
      }
      <INITIAL> "function"/key_end {
          KEYNAME_SET_RET(ctx, arg, FUNCTION, BASH_KEY_INSTR);
      }
      <INITIAL> "time"/key_end {
          KEYNAME_SET_RET(ctx, arg, TIME, BASH_KEY_INSTR);
      }
      <INITIAL> "{"/key_end {
          if (ctx->last_read_token == TOK_ARITH_FOR_EXPRS)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, BEGIN, BASH_KEY_INSTR);
          KEYNAME_SET_RET(ctx, arg, BEGIN, BASH_KEY_INSTR);
      }
      <INITIAL> "}"/key_end {
          KEYNAME_SET_RET(ctx, arg, END, BASH_KEY_INSTR);
      }
      <INITIAL> "!"/key_end {
          KEYNAME_SET_RET(ctx, arg, BANG, BASH_KEY_INSTR);
      }
      <INITIAL> "[["/key_end {
          KEYNAME_SET_RET(ctx, arg, COND_START, BASH_KEY_INSTR);
      }
      <INITIAL> "]]"/key_end {
          KEYNAME_SET_RET(ctx, arg, COND_END, BASH_KEY_INSTR);
      }
      <INITIAL> "coproc"/key_end {
          KEYNAME_SET_RET(ctx, arg, COPROC, BASH_KEY_INSTR);
      }
      <INITIAL> "-p"/key_end {
          if (ctx->last_read_token == TOK_TIME)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, TIMEOPT, BASH_KEY_INSTR);
          KEYNAME_SET_RET(ctx, arg, TIMEOPT, BASH_KEY_INSTR);
      }
      <INITIAL> "--"/key_end {
          if (ctx->last_read_token == TOK_TIMEOPT)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, TIMEIGN, BASH_KEY_INSTR);
          KEYNAME_SET_RET(ctx, arg, TIMEIGN, BASH_KEY_INSTR);
      }
      <INITIAL> "((" [^)\x00]* "))" {
          YYSETSTATE(-1);
          if (ctx->last_read_token == TOK_FOR)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, ARITH_FOR_EXPRS, BASH_KEY_INSTR);
          detect_buf_deinit(&ctx->lexer.buf);
          RET(ctx, TOK_ERROR);
      }
      <INITIAL> self {
          arg->data.value.str = (char *)&selfsyms[DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]];
          arg->data.value.len = 1;
          arg->data.tok = DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1];
          RET(ctx, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
      }
      <INITIAL> whitespace {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto bash_INITIAL;
      }
      <INITIAL> "{"[_a-zA-Z][_a-zA-Z0-9]*"}"/[<>] {
          YYSETSTATE(-1);
          KEYNAME_SET_RET_WO_CHECK(ctx, arg, REDIR_WORD, 0);
      }
      <INITIAL> [$][_a-zA-Z][_a-zA-Z0-9]*|[$][0-9]|"${"word+"}" {
          YYSETSTATE(-1);
          if (ctx->last_read_token != TOK_WORD)
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, WORD, BASH_KEY_INSTR);
          else
              KEYNAME_SET_RET_WO_CHECK(ctx, arg, WORD, 0);
      }
      <INITIAL> word {
          detect_buf_init(&ctx->lexer.buf, 32, 1024);
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '\'') {
              YYSETCONDITION(bash_SQUOTE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '"') {
              YYSETCONDITION(bash_DQUOTE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1] == '\\') {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              YYSETCONDITION(bash_WORD_ESCAPE);
              YYSETSTATE(-1);
              goto yy0;
          }
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto bash_WORD;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <INITIAL> [\x00] { return (0); }
    */
}
