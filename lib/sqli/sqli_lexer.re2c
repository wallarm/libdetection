#include "sqli.h"
#include "sqli_lexer.h"
#include <assert.h>
#include <string.h>

/*!max:re2c */

#define MAXBUFSIZ 1024
#define MINBUFSIZ 32

#define SSYM(ch) [ch] = ch

static const unsigned char selfsyms[] = {
    SSYM('.'), SSYM(','), SSYM('('), SSYM(')'),
    SSYM('*'), SSYM('['), SSYM(']'),
    SSYM(';'), SSYM('='), SSYM(':'), SSYM('{'),
    SSYM('}'), SSYM('-'), SSYM('+'),
};

int
sqli_get_token(
    struct sqli_detect_ctx *ctx, union SQLI_PARSER_STYPE *arg)
{
    const unsigned char *end;
    unsigned char yych, yyaccept;
    int rv;

    if (ctx->lexer.pending[ctx->lexer.pending_first].tok > 0) {
        struct sqli_pending_token *token =
            &ctx->lexer.pending[ctx->lexer.pending_first];
        int tok = token->tok;

        *arg = token->arg;
        memset(token, 0, sizeof(*token));
        SQLI_PENDING_SHIFT(ctx->lexer.pending_first);
        return (tok);
    }

    if ((rv = detect_re2c_prepare_input(&ctx->lexer.re2c, &end, YYMAXFILL)) != 0)
        return (-rv);

#define YYGETSTATE() ctx->lexer.state
#define YYSETSTATE(st) \
    ({ \
        ctx->lexer.state = (st); \
    })
#define YYGETCONDITION() ctx->lexer.condition
#define YYSETCONDITION(cond) ({ctx->lexer.condition = (cond);})
#define RET(ctx, tok) \
    do { \
       DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c); \
       return (tok); \
    } while (0)
#define KEYNAME_SET(arg, _name_str) \
    do { \
        (arg)->data.value.str = _name_str; \
        (arg)->data.value.len = sizeof(_name_str) - 1; \
    } while (0)
#define KEYNAME_SET_RET_EX(ctx, arg, _str, _name, _flags) \
    do { \
        KEYNAME_SET(arg, _str); \
        (arg)->data.flags = (_flags); \
        (arg)->data.tok = TOK_##_name; \
        RET(ctx, TOK_##_name); \
    } while (0)
#define KEYNAME_SET_RET(ctx, arg, _name, _flags) \
    KEYNAME_SET_RET_EX(ctx, arg, #_name, _name, _flags)
#define RET_DATA_EX(toksuff, ctx, arg, _flags) \
    do { \
        (arg)->data.value = (ctx)->lexer.buf.data; \
        (arg)->data.tok = TOK_##toksuff; \
        (arg)->data.flags = (_flags)|SQLI_VALUE_NEEDFREE; \
        detect_buf_reinit(&(ctx)->lexer.buf); \
        RET(ctx, TOK_##toksuff); \
    } while (0)
#define RET_DATA(toksuff, ctx, arg) \
    RET_DATA_EX(toksuff, ctx, arg, 0)
#define RET_DATA_ERROR(ctx) detect_buf_deinit(&(ctx)->lexer.buf)

    /*!re2c
      re2c:define:YYCTYPE  = "DETECT_RE2C_YYCTYPE";
      re2c:define:YYCURSOR = DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c);
      re2c:define:YYMARKER = DETECT_RE2C_YYMARKER(&ctx->lexer.re2c);
      re2c:define:YYCTXMARKER = DETECT_RE2C_YYCTXMARKER(&ctx->lexer.re2c);
      re2c:define:YYLIMIT  = end;
      re2c:define:YYCONDTYPE = SQLI_LEXER_CONDTYPE;
      re2c:define:YYFILL   = "DETECT_RE2C_YYFILL(&ctx->lexer.re2c, &end, @@, YYMAXFILL);";
      re2c:define:YYFILL@len = @@ ;
      re2c:define:YYFILL:naked = 1;
      re2c:yyfill:enable   = 1;
      re2c:yyfill:check    = 1;
      re2c:yych:conversion = 0;
      re2c:indent:top      = 1;
      re2c:variable:yych   = yych;
      re2c:variable:yyaccept = yyaccept;
      re2c:condprefix      = sqli_;
      re2c:condenumprefix  = sqli_;

      whitespace = [ \x01-\x1F\x7F\x80\x81\x88\x8D\x8F\x90\x98\x9D\xA0]|[\xC2][\xA0];
      self = [,\.()\[\];=:{}];
      opchar = [~!^&|%+\-*/<>];
      opchar_nocomment = [~!^&|%+<>=];
      key_end = [^a-zA-Z0-9_];

      <> {
          if (ctx->lexer.instring) {
              YYSETCONDITION(sqli_INSTRING);
              arg->data.flags = SQLI_DATA_NOSTART;
              detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
              goto sqli_INSTRING;
          }
          YYSETCONDITION(sqli_INITIAL);
          goto sqli_INITIAL;
      }
      <INSTRING> "''"|'""'|'``' {
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_INSTRING;
      }
      <INSTRING> ['"`] => INITIAL {
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <SQUOTE> "''" {
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_SQUOTE;
      }
      <DQUOTE> '""' {
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_DQUOTE;
      }
      <BQUOTE> '``' {
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_DQUOTE;
      }
      <SQUOTE> ['] => INITIAL {
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <DQUOTE> ["] => INITIAL {
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <BQUOTE> [`] => INITIAL {
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <INSTRING,SQUOTE,DQUOTE,BQUOTE> [\x00] {
          if (ctx->lexer.re2c.fin && ctx->lexer.re2c.tmp_data_in_use &&
              ctx->lexer.re2c.pos >= ctx->lexer.re2c.tmp_data + ctx->lexer.re2c.tmp_data_siz) {
              YYSETCONDITION(sqli_INITIAL);
              DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
              arg->data.flags |= SQLI_DATA_NOEND;
              YYSETSTATE(-1);
              RET_DATA(DATA, ctx, arg);
          }
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto yy0;
      }
      <INSTRING,SQUOTE,DQUOTE,BQUOTE> .|[\n] {
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto yy0;
      }
      <INSTRING,SQUOTE,DQUOTE,BQUOTE> [^] {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA_ERROR(ctx);
          RET(ctx, TOK_ERROR);
      }
      <NUMBER> [0-9] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_NUMBER;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER> [\.] => DECIMAL {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_DECIMAL;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER> [eE] => EXP {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_EXP;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER_OR_VAR> [0-9] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_NUMBER_OR_VAR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER_OR_VAR> [\.] => DECIMAL {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_DECIMAL;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER_OR_VAR> [eE] => EXP_OR_VAR {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_EXP_OR_VAR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <NUMBER_OR_VAR> [a-dA-Df-zF-Z_@$] => VAR {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_VAR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <DECIMAL> [0-9] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_DECIMAL;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <DECIMAL> [eE] => EXP {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_EXP;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <EXP_OR_VAR> [0-9] => EXP {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_EXP;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <EXP_OR_VAR> [a-zA-Z_@$] => VAR {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_VAR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <EXP> [0-9] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_EXP;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <EXP> [\.] => INITIAL {
          detect_buf_deinit(&ctx->lexer.buf);

          arg->data.value.str = (char *)&selfsyms['.'];
          arg->data.value.len = 1;
          arg->data.flags = SQLI_KEY_INSTR;
          arg->data.tok = '.';
          YYSETSTATE(-1);
          RET(ctx, '.');
      }
      <NUMBER_OR_VAR,NUMBER,DECIMAL,EXP_OR_VAR,EXP> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA(NUM, ctx, arg);
      }
      <HEXNUMBER> [0-9a-fA-F] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_HEXNUMBER;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <HEXNUMBER> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA(NUM, ctx, arg);
      }
      <BITVALUE, QBITVALUE> [0-1] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto yy0;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <QBITVALUE> ['] => INITIAL {
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <BITVALUE, QBITVALUE> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA(DATA, ctx, arg);
      }
      <VAR> [0-9a-zA-Z_@$#]|[\xC0-\xDF][\x80-\xBF] {
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_VAR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <VAR> [\.] {
          if (ctx->var_start_with_num) {
             YYSETCONDITION(sqli_INITIAL_AFTER_VAR);
          } else {
             YYSETCONDITION(sqli_INITIAL);
          }
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA(NAME, ctx, arg);
      }
      <VAR> [^] => INITIAL {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
          RET_DATA(NAME, ctx, arg);
      }
      <INITIAL_AFTER_VAR> [\.] => INITIAL {
          YYSETSTATE(-1);
          arg->data.value.str = (char *)&selfsyms[DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]];
          arg->data.value.len = 1;
          arg->data.flags = SQLI_KEY_INSTR;
          arg->data.tok = DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1];
          RET(ctx, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
      }
      <MINUS> '-' {
          assert(ctx->lexer.buf.data.len > 0);
          ctx->lexer.buf.data.len--;
          YYSETCONDITION(sqli_DASHCOMMENT);
          YYSETSTATE(-1);
          if (!ctx->lexer.buf.data.len) {
              detect_buf_deinit(&ctx->lexer.buf);
              goto sqli_DASHCOMMENT;
          }
          goto self_done;
      }
      <MINUS> [^] => INITIAL {
          assert(ctx->lexer.buf.data.len != 0);
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
  self_done:
          if (ctx->lexer.buf.data.len == 1) {
              unsigned char prev = ctx->lexer.buf.data.str[0];

              if (prev < sizeof(selfsyms) / sizeof(selfsyms[0]) &&
                  selfsyms[prev] != 0) {

                  detect_buf_deinit(&ctx->lexer.buf);

                  arg->data.value.str = (char *)&selfsyms[prev];
                  arg->data.value.len = 1;
                  arg->data.flags = SQLI_KEY_INSTR;
                  arg->data.tok = prev;
                  RET(ctx, prev);
              }
          }
          RET_DATA_EX(OPERATOR, ctx, arg, SQLI_KEY_INSTR);
      }
      <OPERATOR> opchar_nocomment {
  opchar_generic:
          if (!detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1])) {
              DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
              goto sqli_OPERATOR;
          } else {
              detect_buf_deinit(&ctx->lexer.buf);
              RET(ctx, TOK_ERROR);
          }
      }
      <OPERATOR> '-' {
          assert(ctx->lexer.buf.data.len > 0);
          if (ctx->lexer.buf.data.str[ctx->lexer.buf.data.len - 1] != '-')
              goto opchar_generic;
          ctx->lexer.buf.data.len--;
          YYSETCONDITION(sqli_DASHCOMMENT);
          YYSETSTATE(-1);
          if (!ctx->lexer.buf.data.len) {
              detect_buf_deinit(&ctx->lexer.buf);
              goto sqli_DASHCOMMENT;
          }
          goto operator_done;
      }
      <OPERATOR> '*' {
          assert(ctx->lexer.buf.data.len > 0);
          if (ctx->lexer.buf.data.str[ctx->lexer.buf.data.len - 1] != '/')
              goto opchar_generic;
          ctx->lexer.buf.data.len--;
          YYSETCONDITION(sqli_STARCOMMENT_PROBE);
          YYSETSTATE(-1);
          if (!ctx->lexer.buf.data.len) {
              detect_buf_deinit(&ctx->lexer.buf);
              goto sqli_STARCOMMENT_PROBE;
          }
          goto operator_done;
      }
      <OPERATOR> '/' {
          assert(ctx->lexer.buf.data.len > 0);
          if (ctx->lexer.buf.data.str[ctx->lexer.buf.data.len - 1] != '*')
              goto opchar_generic;
          // process unexpected "*/" construction as a space
          ctx->lexer.buf.data.len--;
          YYSETCONDITION(sqli_INITIAL);
          YYSETSTATE(-1);
          if (!ctx->lexer.buf.data.len) {
              detect_buf_deinit(&ctx->lexer.buf);
              goto sqli_INITIAL;
          }
          goto operator_done;
      }
      <OPERATOR> [^] => INITIAL {
          assert(ctx->lexer.buf.data.len != 0);
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          YYSETSTATE(-1);
  operator_done:
          if (ctx->lexer.buf.data.len == 1) {
              unsigned char prev = ctx->lexer.buf.data.str[0];

              if (prev < sizeof(selfsyms) / sizeof(selfsyms[0]) &&
                  selfsyms[prev] != 0) {

                  detect_buf_deinit(&ctx->lexer.buf);

                  arg->data.value.str = (char *)&selfsyms[prev];
                  arg->data.value.len = 1;
                  arg->data.flags = SQLI_KEY_INSTR;
                  arg->data.tok = prev;
                  RET(ctx, prev);
              }
          }
          RET_DATA_EX(OPERATOR, ctx, arg, SQLI_KEY_INSTR);
      }
      <DASHCOMMENT> [\r\n] => INITIAL {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_INITIAL;
      }
      <DASHCOMMENT> [\x00] => INITIAL {
          // TODO: create UNCLOSED_COMMENT key
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          goto sqli_INITIAL;
      }
      <DASHCOMMENT> . => DASHCOMMENT {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_DASHCOMMENT;
      }
      <STARCOMMENT_PROBE> [\x00] => INITIAL {
          // TODO: create UNCLOSED_COMMENT key
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          goto sqli_INITIAL;
      }
      <STARCOMMENT_PROBE> ('!' [0-9]{0,6})|("M!" [0-9]{0,6}) => INITIAL {
          // TODO: create EXECUTABLE_COMMENT key
          goto sqli_INITIAL;
      }
      <STARCOMMENT_PROBE> [^] => STARCOMMENT {
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          goto sqli_STARCOMMENT;
      }
      <STARCOMMENT> [\x00] => INITIAL {
          // TODO: create UNCLOSED_COMMENT key
          DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)--;
          goto sqli_INITIAL;
      }
      <STARCOMMENT> '*/' => INITIAL {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_INITIAL;
      }
      <STARCOMMENT> [^] => STARCOMMENT {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_STARCOMMENT;
      }
      <INITIAL> whitespace {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_INITIAL;
      }
      <INITIAL> '#' => DASHCOMMENT {
          DETECT_RE2C_UNUSED_BEFORE(&ctx->lexer.re2c);
          goto sqli_DASHCOMMENT;
      }
      <INITIAL> 'SELECT'/key_end {
          KEYNAME_SET_RET(ctx, arg, SELECT, SQLI_KEY_READ|SQLI_KEY_INSTR);
      }
      <INITIAL> 'UPDATE'/key_end {
          KEYNAME_SET_RET(ctx, arg, UPDATE, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'INSERT'/key_end {
          KEYNAME_SET_RET(ctx, arg, INSERT, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'EXECUTE'/key_end {
          KEYNAME_SET_RET(ctx, arg, EXECUTE, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'DROP'/key_end {
          KEYNAME_SET_RET(ctx, arg, DROP, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'DELETE'/key_end {
          KEYNAME_SET_RET(ctx, arg, DELETE, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'DISTINCT'/key_end {
          KEYNAME_SET_RET(ctx, arg, DISTINCT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'VARIADIC'/key_end {
          KEYNAME_SET_RET(ctx, arg, VARIADIC, SQLI_KEY_INSTR);
      }
      <INITIAL> 'BETWEEN'/key_end {
          KEYNAME_SET_RET(ctx, arg, BETWEEN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LIKE'/key_end {
          KEYNAME_SET_RET(ctx, arg, LIKE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'RLIKE'/key_end {
          KEYNAME_SET_RET(ctx, arg, RLIKE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'FROM'/key_end {
          KEYNAME_SET_RET(ctx, arg, FROM, SQLI_KEY_INSTR);
      }
      <INITIAL> 'FOR'/key_end {
          KEYNAME_SET_RET(ctx, arg, FOR, SQLI_KEY_INSTR);
      }
      <INITIAL> 'INTO'/key_end {
          KEYNAME_SET_RET(ctx, arg, INTO, SQLI_KEY_INSTR);
      }
      <INITIAL> 'WHERE'/key_end {
          KEYNAME_SET_RET(ctx, arg, WHERE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'OR'/key_end {
          KEYNAME_SET_RET(ctx, arg, OR, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ON'/key_end {
          KEYNAME_SET_RET(ctx, arg, ON, SQLI_KEY_INSTR);
      }
      <INITIAL> 'AS'/key_end {
          KEYNAME_SET_RET(ctx, arg, AS, SQLI_KEY_INSTR);
      }
      <INITIAL> 'SET'/key_end {
          KEYNAME_SET_RET(ctx, arg, SET, SQLI_KEY_INSTR);
      }
      <INITIAL> 'CROSS'/key_end {
          KEYNAME_SET_RET(ctx, arg, CROSS, SQLI_KEY_INSTR);
      }
      <INITIAL> 'FULL'/key_end {
          KEYNAME_SET_RET(ctx, arg, FULL, SQLI_KEY_INSTR);
      }
      <INITIAL> 'INNER'/key_end {
          KEYNAME_SET_RET(ctx, arg, INNER, SQLI_KEY_INSTR);
      }
      <INITIAL> 'NATURAL'/key_end {
          KEYNAME_SET_RET(ctx, arg, NATURAL, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LEFT'/key_end {
          KEYNAME_SET_RET(ctx, arg, LEFT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'RIGHT'/key_end {
          KEYNAME_SET_RET(ctx, arg, RIGHT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'JOIN'/key_end {
          KEYNAME_SET_RET(ctx, arg, JOIN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'USING'/key_end {
          KEYNAME_SET_RET(ctx, arg, USING, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ORDER'/key_end {
          KEYNAME_SET_RET(ctx, arg, ORDER, SQLI_KEY_INSTR);
      }
      <INITIAL> 'BY'/key_end {
          KEYNAME_SET_RET(ctx, arg, BY, SQLI_KEY_INSTR);
      }
      <INITIAL> 'GROUP'/key_end {
          KEYNAME_SET_RET(ctx, arg, GROUP, SQLI_KEY_INSTR);
      }
      <INITIAL> 'UNION'/key_end {
          KEYNAME_SET_RET(ctx, arg, UNION, SQLI_KEY_INSTR);
      }
      <INITIAL> 'INTERSECT'/key_end {
          KEYNAME_SET_RET(ctx, arg, INTERSECT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'EXCEPT'/key_end {
          KEYNAME_SET_RET(ctx, arg, EXCEPT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ALL'/key_end {
          KEYNAME_SET_RET(ctx, arg, ALL, SQLI_KEY_INSTR);
      }
      <INITIAL> 'HAVING'/key_end {
          KEYNAME_SET_RET(ctx, arg, HAVING, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LIMIT'/key_end {
          KEYNAME_SET_RET(ctx, arg, LIMIT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'OFFSET'/key_end {
          KEYNAME_SET_RET(ctx, arg, OFFSET, SQLI_KEY_INSTR);
      }
      <INITIAL> 'IS'/key_end {
          KEYNAME_SET_RET(ctx, arg, IS, SQLI_KEY_INSTR);
      }
      <INITIAL> 'NOT'/key_end {
          KEYNAME_SET_RET(ctx, arg, NOT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DIV'/key_end {
          KEYNAME_SET_RET(ctx, arg, DIV, SQLI_KEY_INSTR);
      }
      <INITIAL> 'CASE'/key_end {
          KEYNAME_SET_RET(ctx, arg, CASE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'WHEN'/key_end {
          KEYNAME_SET_RET(ctx, arg, WHEN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'THEN'/key_end {
          KEYNAME_SET_RET(ctx, arg, THEN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ELSE'/key_end {
          KEYNAME_SET_RET(ctx, arg, ELSE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'END'/key_end {
          KEYNAME_SET_RET(ctx, arg, END, SQLI_KEY_INSTR);
      }
      <INITIAL> 'IN'/key_end {
          KEYNAME_SET_RET(ctx, arg, IN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'BOOLEAN'/key_end {
          KEYNAME_SET_RET(ctx, arg, BOOLEAN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'MODE'/key_end {
          KEYNAME_SET_RET(ctx, arg, MODE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'WAITFOR'/key_end {
          KEYNAME_SET_RET(ctx, arg, WAITFOR, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DELAY'/key_end {
          KEYNAME_SET_RET(ctx, arg, DELAY, SQLI_KEY_INSTR);
      }
      <INITIAL> 'TIME'/key_end {
          KEYNAME_SET_RET(ctx, arg, TIME, SQLI_KEY_INSTR);
      }
      <INITIAL> '||' {
          KEYNAME_SET_RET(ctx, arg, OR2, SQLI_KEY_INSTR);
      }
      <INITIAL> 'AND'/key_end {
          KEYNAME_SET_RET(ctx, arg, AND, SQLI_KEY_INSTR);
      }
      <INITIAL> '&&' {
          KEYNAME_SET_RET(ctx, arg, AND, SQLI_KEY_INSTR);
      }
      <INITIAL> 'MOD'/key_end {
          KEYNAME_SET_RET(ctx, arg, MOD, SQLI_KEY_INSTR);
      }
      <INITIAL> 'XOR'/key_end {
          KEYNAME_SET_RET(ctx, arg, XOR, SQLI_KEY_INSTR);
      }
      <INITIAL> 'REGEXP'/key_end {
          KEYNAME_SET_RET(ctx, arg, REGEXP, SQLI_KEY_INSTR);
      }
      <INITIAL> 'BINARY'/key_end {
          KEYNAME_SET_RET(ctx, arg, BINARY, SQLI_KEY_INSTR);
      }
      <INITIAL> 'SOUNDS'/key_end {
          KEYNAME_SET_RET(ctx, arg, SOUNDS, SQLI_KEY_INSTR);
      }
      <INITIAL> 'OUTFILE'/key_end {
          KEYNAME_SET_RET(ctx, arg, OUTFILE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'BEGIN'/key_end {
          KEYNAME_SET_RET(ctx, arg, BEGIN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'TOP'/key_end {
          KEYNAME_SET_RET(ctx, arg, TOP, SQLI_KEY_INSTR);
      }
      <INITIAL> 'PERCENT'/key_end {
          KEYNAME_SET_RET(ctx, arg, PERCENT, SQLI_KEY_INSTR);
      }
      <INITIAL> "\\N"/key_end {
          RET_DATA(NAME, ctx, arg);
      }
      <INITIAL> 'CREATE'/key_end {
          KEYNAME_SET_RET(ctx, arg, CREATE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'REPLACE'/key_end {
          KEYNAME_SET_RET(ctx, arg, REPLACE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'FUNCTION'/key_end {
          KEYNAME_SET_RET(ctx, arg, FUNCTION, SQLI_KEY_INSTR);
      }
      <INITIAL> 'RETURNS'/key_end {
          KEYNAME_SET_RET(ctx, arg, RETURNS, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LANGUAGE'/key_end {
          KEYNAME_SET_RET(ctx, arg, LANGUAGE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'STRICT'/key_end {
          KEYNAME_SET_RET(ctx, arg, STRICT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DESC'/key_end {
          KEYNAME_SET_RET(ctx, arg, DESC, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ASC'/key_end {
          KEYNAME_SET_RET(ctx, arg, ASC, SQLI_KEY_INSTR);
      }
      <INITIAL> 'SHUTDOWN'/key_end {
          KEYNAME_SET_RET(ctx, arg, SHUTDOWN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DECLARE'/key_end {
          KEYNAME_SET_RET(ctx, arg, DECLARE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'EXEC'/key_end {
          KEYNAME_SET_RET(ctx, arg, EXECUTE, SQLI_KEY_WRITE|SQLI_KEY_INSTR);
      }
      <INITIAL> 'TABLE'/key_end {
          KEYNAME_SET_RET(ctx, arg, TABLE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'MATCH'/key_end {
          KEYNAME_SET_RET(ctx, arg, MATCH, SQLI_KEY_INSTR);
      }
      <INITIAL> 'AGAINST'/key_end {
          KEYNAME_SET_RET(ctx, arg, AGAINST, SQLI_KEY_INSTR);
      }
      <INITIAL> 'COLLATE'/key_end {
          KEYNAME_SET_RET(ctx, arg, COLLATE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'USE'/key_end {
          KEYNAME_SET_RET(ctx, arg, USE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'IGNORE'/key_end {
          KEYNAME_SET_RET(ctx, arg, IGNORE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LOW_PRIORITY'/key_end {
          KEYNAME_SET_RET(ctx, arg, LOW_PRIORITY, SQLI_KEY_INSTR);
      }
      <INITIAL> 'QUICK'/key_end {
          KEYNAME_SET_RET(ctx, arg, QUICK, SQLI_KEY_INSTR);
      }
      <INITIAL> 'PRINT'/key_end {
          KEYNAME_SET_RET(ctx, arg, PRINT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'EXIST'/key_end {
          KEYNAME_SET_RET(ctx, arg, EXIST, SQLI_KEY_INSTR);
      }
      <INITIAL> 'UESCAPE'/key_end {
          KEYNAME_SET_RET(ctx, arg, UESCAPE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LOAD'/key_end {
          KEYNAME_SET_RET(ctx, arg, LOAD, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DATA'/key_end {
          KEYNAME_SET_RET(ctx, arg, DATA2, SQLI_KEY_INSTR);
      }
      <INITIAL> 'XML'/key_end {
          KEYNAME_SET_RET(ctx, arg, XML, SQLI_KEY_INSTR);
      }
      <INITIAL> 'CONCURRENT'/key_end {
          KEYNAME_SET_RET(ctx, arg, CONCURRENT, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LOCAL'/key_end {
          KEYNAME_SET_RET(ctx, arg, LOCAL, SQLI_KEY_INSTR);
      }
      <INITIAL> 'INFILE'/key_end {
          KEYNAME_SET_RET(ctx, arg, INFILE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'PROCEDURE'/key_end {
          KEYNAME_SET_RET(ctx, arg, PROCEDURE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'GOTO'/key_end {
          KEYNAME_SET_RET(ctx, arg, GOTO, SQLI_KEY_INSTR);
      }
      <INITIAL> 'DATABASE'/key_end {
          KEYNAME_SET_RET(ctx, arg, DATABASE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'CALL'/key_end {
          KEYNAME_SET_RET(ctx, arg, CALL, SQLI_KEY_INSTR);
      }
      <INITIAL> 'CURSOR'/key_end {
          KEYNAME_SET_RET(ctx, arg, CURSOR, SQLI_KEY_INSTR);
      }
      <INITIAL> 'XML'/key_end {
          KEYNAME_SET_RET(ctx, arg, XML, SQLI_KEY_INSTR);
      }
      <INITIAL> 'PATH'/key_end {
          KEYNAME_SET_RET(ctx, arg, PATH, SQLI_KEY_INSTR);
      }
      <INITIAL> 'VALUES'/key_end {
          KEYNAME_SET_RET(ctx, arg, VALUES, SQLI_KEY_INSTR);
      }
      <INITIAL> 'OPEN'/key_end {
          KEYNAME_SET_RET(ctx, arg, OPEN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'OVER'/key_end {
          KEYNAME_SET_RET(ctx, arg, OVER, SQLI_KEY_INSTR);
      }
      <INITIAL> 'WITHIN'/key_end {
          KEYNAME_SET_RET(ctx, arg, WITHIN, SQLI_KEY_INSTR);
      }
      <INITIAL> 'ALTER'/key_end {
          KEYNAME_SET_RET(ctx, arg, ALTER, SQLI_KEY_INSTR);
      }
      <INITIAL> 'RECOVERY'/key_end {
          KEYNAME_SET_RET(ctx, arg, RECOVERY, SQLI_KEY_INSTR);
      }
      <INITIAL> 'SIMPLE'/key_end {
          KEYNAME_SET_RET(ctx, arg, SIMPLE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'LOCK'/key_end {
          KEYNAME_SET_RET(ctx, arg, LOCK, SQLI_KEY_INSTR);
      }
      <INITIAL> 'SHARE'/key_end {
          KEYNAME_SET_RET(ctx, arg, SHARE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'IF'/key_end {
          KEYNAME_SET_RET(ctx, arg, IF, SQLI_KEY_INSTR);
      }
      <INITIAL> 'WHILE'/key_end {
          KEYNAME_SET_RET(ctx, arg, WHILE, SQLI_KEY_INSTR);
      }
      <INITIAL> 'FIRST'/key_end {
          KEYNAME_SET_RET(ctx, arg, FIRST, SQLI_KEY_INSTR);
      }
      <INITIAL> opchar => OPERATOR {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_OPERATOR;
      }
      <INITIAL> [']|'_latin'[17]whitespace*[']|'n'[']|'x'[']|'_utf8'whitespace*['] => SQUOTE {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
          goto sqli_SQUOTE;
      }
      <INITIAL> ["] => DQUOTE {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
          goto sqli_DQUOTE;
      }
      <INITIAL> [`] => BQUOTE {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
          goto sqli_BQUOTE;
      }
      <INITIAL> [\.][0-9] => DECIMAL {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
          detect_buf_add_char(&ctx->lexer.buf, '.');
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_DECIMAL;
      }
      <INITIAL> '0x' => HEXNUMBER {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 2048);
          detect_buf_add_char(&ctx->lexer.buf, '0');
          detect_buf_add_char(&ctx->lexer.buf, 'x');
          goto sqli_HEXNUMBER;
      }
      <INITIAL> ("0b"|'b')[0-1] => BITVALUE {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
          detect_buf_add_char(&ctx->lexer.buf, '0');
          detect_buf_add_char(&ctx->lexer.buf, 'b');
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_BITVALUE;
      }
      <INITIAL> ("0b'"|'b\'')[0-1] => QBITVALUE {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
          detect_buf_add_char(&ctx->lexer.buf, '0');
          detect_buf_add_char(&ctx->lexer.buf, 'b');
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_QBITVALUE;
      }
      <INITIAL> '\\'|[0-9] {
          if (ctx->var_start_with_num) {
              YYSETCONDITION(sqli_NUMBER_OR_VAR);
              detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
              detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
              goto sqli_NUMBER_OR_VAR;
          } else {
              YYSETCONDITION(sqli_NUMBER);
              detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
              detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
              goto sqli_NUMBER;
          }
      }
      <INITIAL> self {
          arg->data.value.str = (char *)&selfsyms[DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]];
          arg->data.value.len = 1;
          arg->data.flags = SQLI_KEY_INSTR;
          arg->data.tok = DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1];
          RET(ctx, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
      }
      <INITIAL> '-' => MINUS {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, MAXBUFSIZ);
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_MINUS;
      }
      <INITIAL> [a-zA-Z_@$]|[\xC0-\xDF][\x80-\xBF] => VAR {
          detect_buf_init(&ctx->lexer.buf, MINBUFSIZ, 256);
          detect_buf_add_char(&ctx->lexer.buf, DETECT_RE2C_YYCURSOR(&ctx->lexer.re2c)[-1]);
          goto sqli_VAR;
      }
      <INITIAL> "/*!" => INITIAL {
          goto sqli_INITIAL;
      }
      <INITIAL> [\x00] {
          if (ctx->lexer.re2c.fin && ctx->lexer.re2c.tmp_data_in_use &&
              ctx->lexer.re2c.pos >= ctx->lexer.re2c.tmp_data + ctx->lexer.re2c.tmp_data_siz) {
              return (0);
          }
          goto yy0;
      }
      <INITIAL> [^] {
          RET(ctx, TOK_ERROR);
      }
    */
}
